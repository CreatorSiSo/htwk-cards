---
import Page from "../template/Page.astro";
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";

const images = import.meta.glob<{ default: ImageMetadata }>(
	"../assets/card_en_*.svg"
);
---

<Page
	lang="en"
	title="HTWK Cards"
	class="bg-zinc-900 text-white flex flex-col items-center gap-10"
>
	<nav
		class="flex p-4 w-full bg-zinc-800 text-[#ede0ce] border-b-2 border-current"
	>
		<h1 class="text-xl font-semibold">HTWK Cards</h1>
	</nav>

	<section
		id="cards-section"
		class="flex flex-wrap justify-center gap-10 px-10 max-w-7xl"
	>
		{
			Object.values(images).map((image) => (
				<div class="group">
					<Image
						width={600}
						height={900}
						src={image()}
						alt=""
						format="webp"
						class="card min-w-80 max-w-80 shadow-lg group-hover:shadow-xl shadow-black/20 group-hover:shadow-black/45"
					/>
				</div>
			))
		}
	</section>
</Page>

<style>
	#cards-section > .group {
		perspective: 15cm;
	}

	#cards-section > .group,
	#cards-section > .group > .card {
		transition-property: transform color;
		transition-duration: 0.6s;
		transition-timing-function: ease-out;
	}
</style>

<script>
	import { debounce, throttle } from "../common.ts";
	import { createEffect, createSignal } from "solid-js";

	const containers = document.querySelectorAll("#cards-section > .group");
	const cards = Array.from(containers).map((container: HTMLElement, index) => {
		const [selected, set_selected] = createSignal(false);
		const [rotation, set_rotation] = createSignal({ x: 0.0, y: 0.0 });
		const [scale, set_scale] = createSignal(1.0);
		return {
			index,
			container,
			image: container.querySelector(".card") as HTMLElement,
			selected,
			set_selected,
			rotation,
			set_rotation,
			scale,
			set_scale,
		};
	});
	cards.forEach((card, index) => {
		card.container.addEventListener("mouseenter", () => card.set_scale(1.05));
		card.container.addEventListener(
			"mouseleave",
			debounce(() => {
				card.set_rotation({ x: 0.0, y: 0.0 });
				card.set_scale(1.0);
			}, 100)
		);

		card.container.addEventListener(
			"mousemove",
			throttle((event: MouseEvent) => {
				const bounds = card.container.getBoundingClientRect();
				const in_bounds_x = event.clientX - bounds.left;
				const in_bounds_y = event.clientY - bounds.top;
				const normalized_x = in_bounds_x / bounds.width - 0.5;
				const normalized_y = in_bounds_y / bounds.height - 0.5;

				const length = Math.min(Math.hypot(normalized_x, normalized_y), 0.3);
				const angle = Math.atan2(normalized_y, normalized_x);

				const factor = 15;
				card.set_rotation({
					x: length * Math.sin(angle) * -factor,
					y: length * Math.cos(angle) * factor,
				});
			}, 50)
		);

		card.container.addEventListener(
			"mousedown",
			throttle(() => {
				cards.forEach((card, other_index) =>
					card.set_selected(index == other_index && !card.selected())
				);
			}, 200)
		);

		createEffect(() => {
			card.image.style.transform =
				`rotateX(${card.rotation().x}deg)  rotateY(${card.rotation().y}deg)` +
				` scale(${card.scale()})`;
		});
		createEffect(() => {
			let x = 0.0;
			let y = 0.0;
			if (card.selected()) {
				const rect = card.container.getClientRects()[0];
				x =
					window.screenX -
					rect.x -
					rect.width / 2 +
					window.screen.availWidth / 2;
				y =
					window.screenY -
					rect.y -
					rect.height / 2 +
					window.screen.availHeight / 2;
			}
			card.container.style.transform = `translate(${x}px, ${y}px)`;
		});
	});
</script>
