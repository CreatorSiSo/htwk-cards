---
import Page from "../template/Page.astro";
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";

const images = import.meta.glob<{ default: ImageMetadata }>(
	"../assets/card_en_*.svg"
);
---

<Page lang="en" title="HTWK Cards" class="bg-zinc-900 text-white flex flex-col">
	<nav
		class="flex p-4 w-full bg-zinc-800 text-[#ede0ce] border-b-2 border-current"
	>
		<h1 class="text-xl font-semibold">HTWK Cards</h1>
	</nav>

	<main class="relative flex flex-col items-center gap-10">
		<section
			id="cards-section"
			class="relative flex flex-wrap justify-center gap-10 px-10 max-w-7xl mt-10"
		>
			{
				Object.values(images).map((image) => (
					<div class="group">
						<Image
							width={600}
							height={900}
							src={image()}
							alt=""
							format="webp"
							class="card min-w-80 max-w-80 shadow-lg group-hover:shadow-xl shadow-black/20 group-hover:shadow-black/45"
						/>
					</div>
				))
			}
		</section>

		<div
			id="backdrop"
			class="absolute inset-0 transition backdrop-blur-sm backdrop-brightness-75 backdrop-saturate-50 opacity-0 pointer-events-none"
		>
		</div>
	</main>
</Page>

<style>
	#cards-section > .group {
		perspective: 15cm;
	}

	#cards-section > .group,
	#cards-section > .group > .card {
		transition-property: transform color;
		transition-duration: 0.5s;
		transition-timing-function: ease-out;
	}
</style>

<script>
	import { debounce, throttle } from "../common.ts";
	import { createEffect, createSignal } from "solid-js";

	const containers = document.querySelectorAll("#cards-section > .group");
	const cards = Array.from(containers).map((container: HTMLElement, index) => {
		const [rotation, set_rotation] = createSignal({ x: 0.0, y: 0.0 });
		const [scale, set_scale] = createSignal(1.0);
		return {
			index,
			container,
			image: container.querySelector(".card") as HTMLElement,
			rotation,
			set_rotation,
			scale,
			set_scale,
		};
	});

	const backdrop = document.querySelector("#backdrop") as HTMLElement;
	const [selection, set_selection] = createSignal({
		selected: false,
		index: 0,
	});

	createEffect<number>((prev_index) => {
		const container = cards[prev_index].container;
		container.style.transform = `translate(0px, 0px)`;
		container.style.zIndex = "0";

		if (selection().selected) {
			const container = cards[selection().index].container;
			const rect = container.getClientRects()[0];
			const x =
				window.screenX - rect.x - rect.width / 2 + window.innerWidth / 2;
			const y =
				window.screenY - rect.y - rect.height / 2 + window.innerHeight / 2;
			container.style.transform = `translate(${x}px, ${y}px)`;
			container.style.zIndex = "100";

			document.body.style.overflow = "hidden";
			backdrop.classList.remove("opacity-0");
			backdrop.classList.remove("pointer-events-none");
		} else {
			document.body.style.overflow = "visible";
			backdrop.classList.add("opacity-0");
			backdrop.classList.add("pointer-events-none");
		}

		return selection().index;
	}, 0);

	backdrop.addEventListener("mousedown", () =>
		set_selection(({ index }) => ({
			selected: false,
			index,
		}))
	);

	for (const card of cards) {
		card.container.addEventListener("mouseenter", () => card.set_scale(1.05));
		card.container.addEventListener(
			"mouseleave",
			debounce(() => {
				card.set_rotation({ x: 0.0, y: 0.0 });
				card.set_scale(1.0);
			}, 100)
		);

		card.container.addEventListener(
			"mousemove",
			throttle((event: MouseEvent) => {
				const bounds = card.container.getBoundingClientRect();
				const in_bounds_x = event.clientX - bounds.left;
				const in_bounds_y = event.clientY - bounds.top;
				const normalized_x = in_bounds_x / bounds.width - 0.5;
				const normalized_y = in_bounds_y / bounds.height - 0.5;

				const length = Math.min(Math.hypot(normalized_x, normalized_y), 0.3);
				const angle = Math.atan2(normalized_y, normalized_x);

				const factor = 15;
				card.set_rotation({
					x: length * Math.sin(angle) * -factor,
					y: length * Math.cos(angle) * factor,
				});
			}, 50)
		);

		card.container.addEventListener(
			"mousedown",
			throttle(() => {
				if (!selection().selected) {
					set_selection({ selected: true, index: card.index });
				}
			}, 200)
		);

		createEffect(() => {
			card.image.style.transform =
				`rotateX(${card.rotation().x}deg)  rotateY(${card.rotation().y}deg)` +
				` scale(${card.scale()})`;
		});
	}
</script>
